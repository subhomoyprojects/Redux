REDUX NOTES :

React-redux being a state management tool makes it easier to pass these states from one 
component to another irrespective of their position in the component tree and hence prevents 
the complexity of the application.

mapStateToProps :

As the first argument passed in to connect, mapStateToProps is used for selecting the part 
of the data from the store that the connected component needs. 

It is called every time the store state changes.
It receives the entire store state, and should return an object of data this component needs.


function mapStateToProps(state):

It should take a first argument called state and return a plain object containing the data 
that the connected component needs.

Connect: Dispatching Actions with mapDispatchToProps (this will connect the actioncreators 
with the redux store for the specific component).

As the second argument passed in to connect, mapDispatchToProps is used for dispatching 
actions to the store.

dispatch is a function of the Redux store. You call store.dispatch to dispatch an action. 
This is the only way to trigger a state change.

With React Redux, your components never access the store directly - connect does it for you. 
React Redux gives you two ways to let components dispatch actions:

By default, a connected component receives props.dispatch and can dispatch actions itself.
connect can accept an argument called mapDispatchToProps, which lets you create functions 
that dispatch when called, and pass those functions as props to your component.
The mapDispatchToProps functions are normally referred to as mapDispatch for short, 
but the actual variable name used can be whatever you want.

 modules required :
 
 npm install react-redux@7.2.4 
 
 npm install redux@4.1.0
 
 
 
 {connect}  ---> 'react-redux'  --->  it is a HOC (Pre defined )
 connect component will link any component with the redux store.
 
 syntax :
 
 export default connect(mapStateToProps,mapDispatchToProps)(Component_name);
 
 {bindActionCreators} ---->  this pre defined functional component binds every 
 actioncreator functions into the dispatch so that they may be invoked directly.

dispatch --->  without this we can not hit any action into the store.

syntax :

bindActionCreators({action_creator_names},dispatch);

action_creator_names----> to be given in comma separated way.

Provider ---  this component makes the redux store available to any nested 
components that need to access the redux store.

syntax:

<Provider store={}>
<Component_name/>
<component_name/>
</Provider>

createstore() ---> this function will create the redux store for our application.
And we need to pass the reducer name as the parameter to this function .
 
Reducer should be a functional component .
syntax :

function abcreducer(state={},action)
{
if(action.type=='increse_count')
{}
else if(action.type=='decrese_count')
{}
}

ActionCreators are the functions which will specify the action types for the 
action to perform.

working folders:

src/  --->in built 

/components  ---> we have to create

/actions ---> we have to create

/reducers ---> we have to create

App.js  --->  we will create the redux store here and will render the components. 

Redux app folder structure :

src
  components ----> components (display.js , counter.js)
  actions ---> actioncreator functions ---> specify the action types
  reducers ---> reducer functional component
  App.js ----> redux store creation 
  
npm install semantic-ui-react@2.0.3